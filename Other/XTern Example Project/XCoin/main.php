<?php
/////////////////////////////////////////////////////
/*

//////////////
// Please Note:
//////////////
This code works and was debugged constantly through development. Please contact me if you have any difficulty running it up on your system. 
- The code was run using PHP v7.0.10 from the terminal of a Xubuntu 16.04 OS.
- This program depends on, besides PHP, a MySQL database (developed w/ v5.7.13). The code to generate the database is appended at the end of the file. (Please ensure mysql user password is loaded into your database properly).
                                                                                                                    
- Additionally, a few of the classes used here were modules I've created for previous projects; hence, they may posess functionality that is not currently in use (e.g., multiple database user definition options for MySQLManager, multiple lookup keys in lookupUserBy function in userManager)
//////////////

//////////////
// Comments:
//////////////
When programming I usually employ a MVC directory structure (for scalling, modularization, and maintainence)
    Because interviewzen requires the program to be on
    one file, I implemented a pseudo filestructure by designating
    the 'directories' with comments and with function arrays.
This program uses a mysql database for persistant storage. 
    (SQL initialization of database for this program is appended to the end of the documment.).
    (Please ensure mysql user password is loaded into your database properly).
//////////////

//////////////
// Program Overview:
//////////////
public - User interface:
    Generated by main function running in loop, 
        (usually I generate web interfaces, such as on toughstem.com, but commandline is within scope of requirements).
    Displays are called by the main function,
        displays (e.g., /member/login, /coin/guess) either display data or ask for an input and run a function
    Displays provide a user interface for data reterned in GenerateViewData or for actions enabled by ClientSideControl

notpublic - the meat of the program:
    - ClientSideControl interacts with the model to manipulate data
    - GenerateViewData queries the model to return data
    - Model stores the states of the program and enables manipulation of the states in a modularized and abstracted way
//////////////

//////////////
// Program Structure:
//////////////
public
    - main
    - Member
        - login
        - signup
        - coins
    - Coin
        - start_guessing <-------- func StartGuessing() {}
notpublic
    - ClientSideControl
        - member
            - login
            - signup
            - logout
        - coins
            - record_and_submit_guess 
    - GenerateViewData
        - display_coins <---------- ~= func GetCoins(userId string) int {}
    - Model
        - DataStructure_Interfaces
            - mysql_interface 
        - Data_Managment
            - UserManager
            - ServerCoinManager 
                - ServerCoinManager->handleGuess($user_guess) <------------- func HandleGuess(userId string, guess int) bool {}
//////////////
*/


/////////////////////////////////////////////////////////////////////////////////////////////////
// public - User Interface
/////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////
// Initialize Public Display function array
///////////////////////////////////////
$GLOBALS['public'] = []; // Because this is a one page program, we are not able to execute the command `include(...)`, 
                         //      thus, we must wrap our user interface displays in functions. For ease of access, these
                         //      functions are stored in the `generate_view` global array.
///////////////////////////////////////

///////////////////////////////////////
// Define public-directory-level global helper function
///////////////////////////////////////
function returnUserInput(){     // return input from commandline
    $handle = fopen ("php://stdin","r");
    $response = str_replace(array("\n", "\r"), '', fgets($handle));
   return $response;
}
///////////////////////////////////////

///////////////////////////////////////
// public/main
///////////////////////////////////////
function main(){
    $index = 0;
    $request_exit = false;
    
    
    while(true){   
        ///////////////////////
        // Make sure user is logged in
        ///////////////////////
        if(!$GLOBALS['UserManager']->isSignedIn()){
            $GLOBALS['public']['member']['login']();
            continue;
        }
        
        ///////////////////////
        // Display Action Options
        ///////////////////////
        $GLOBALS['public']['main']['options']();
    }
}
///////////////////////////////////////

////////////////////////
// Initialize Helper function for main loop, offering the user options of what they can do
////////////////////////
$GLOBALS['public']['main'] = [];
$GLOBALS['public']['main']['options'] = function(){
    ////////////////////////////
    // Define Options
    ////////////////////////////
    $options = [];
    $options[1] = function(){
        $GLOBALS['public']['member']['coins']();
    };
    $options[2] = function(){
        $GLOBALS['public']['coins']['start_guessing']();
    };
    $options[3] = function(){
        print("Goodbye!\n\n");
        exit();
    };

    /////////////////////////////
    // Ask user what they would like to do
    /////////////////////////////
    ob_start(); 
    ?>

Please select what you would like to do by entering a number 1-3.
Your options are:
1) display your coin count
2) start guessing new coins
3) exit
--> <?php
    $display = ob_get_contents();
    ob_end_clean();
    print($display);
    /////////////////////////////////////////////////
    $choice = (int)returnUserInput();

    ////////////////////////////
    // Respond to User Choice
    ////////////////////////////
    if(in_array($choice, [1,2,3])){
        $options[$choice]();
    } else {
        ob_start(); 
        ?>

Sorry, that is not a valid option.

        <?php
        $display = ob_get_contents();
        ob_end_clean();
        print($display);
    }   
    
};
////////////////////////



///////////////////////////////////////
// public/member
///////////////////////////////////////
////////////////////////
// Initialize member directory of public display function array
////////////////////////
$GLOBALS['public']['member'] = [];
////////////////////////
////////////////////////
// public/member/login
////////////////////////
$GLOBALS['public']['member']['login'] = function(){
    /////////////////////////////////////////////////
    // Display 'Do you have account'
    /////////////////////////////////////////////////
    ob_start(); 
    ?>

You must be signed-in in order to use this XternCoin Service.
Do you have an account? (Y/n)
--> <?php
    $display = ob_get_contents();
    ob_end_clean();
    print($display);
    /////////////////////////////////////////////////


    /////////////////////////////////////////////////
    // Wait for Input
    /////////////////////////////////////////////////
    $handle = fopen ("php://stdin","r");
    $response = str_replace(array("\n", "\r"), '', fgets($handle));
    if(strtolower($response) == 'n'){
        $GLOBALS['public']['member']['signup']();
        return;
    } else if (strtolower($response) !== 'y'){
        print("Sorry, I do not understand that input");
        return;
    }
        

    /////////////////////////////////////////////////
    // Display - Ask for Username
    /////////////////////////////////////////////////
    ob_start(); 
    ?>

Great!
Please enter your username.
--> <?php
    $display = ob_get_contents();
    ob_end_clean();
    print($display);
    /////////////////////////////////////////////////
    $username = returnUserInput();
    
    

    /////////////////////////////////////////////////
    // Display - Ask for Password
    /////////////////////////////////////////////////
    ob_start(); 
    ?>

Thanks!
Now, please enter your password.
--> <?php
    $display = ob_get_contents();
    ob_end_clean();
    print($display);
    /////////////////////////////////////////////////
    $password = returnUserInput();
    
    
    //////////////////////////////////////////////////
    // Send data to server to attempt login
    //////////////////////////////////////////////////
    $result = $GLOBALS['notpublic']['ClientSideControl']['member']['login']($username, $password);
    
    //////////////////////////////////////////////////
    // Respond to login attempt
    //////////////////////////////////////////////////
    if($result == false){
        /////////////////////////////////////////////////
        // Display - Not Successful Login
        /////////////////////////////////////////////////
        ob_start(); 
        ?>

... 
Sorry, that username, password combination is not recognized.

        <?php
        $display = ob_get_contents();
        ob_end_clean();
        print($display);
        /////////////////////////////////////////////////
    } else {
        /////////////////////////////////////////////////
        // Display - Successful Login
        /////////////////////////////////////////////////
        ob_start(); 
        ?>

... 
Success!
Welcome Back.

        <?php
        $display = ob_get_contents();
        ob_end_clean();
        print($display);
        /////////////////////////////////////////////////
    }
    
};

////////////////////////
// public/member/signup
////////////////////////
$GLOBALS['public']['member']['signup'] = function(){
    /////////////////////////////////////////////////
    // Display - Ask for Username
    /////////////////////////////////////////////////
    ob_start(); 
    ?>

Then welcome, first-timer!
To sign up, please enter a username.
--> <?php
    $display = ob_get_contents();
    ob_end_clean();
    print($display);
    /////////////////////////////////////////////////
    $username = returnUserInput();
    

    /////////////////////////////////////////////////
    // Display - Ask for Password
    /////////////////////////////////////////////////
    ob_start(); 
    ?>

Thanks!
Now, please enter a password.
--> <?php
    $display = ob_get_contents();
    ob_end_clean();
    print($display);
    /////////////////////////////////////////////////
    $password = returnUserInput();
    
    
    /////////////////////////////////////////////////
    // Attempt Registration
    /////////////////////////////////////////////////
    $result = $GLOBALS['notpublic']['ClientSideControl']['member']['signup']($username, $password);
    //$result = true;
    
    //////////////////////////////////////////////////
    // Respond to registration attempt
    //////////////////////////////////////////////////
    if($result == 'ALREADY_REGISTERED'){
        /////////////////////////////////////////////////
        // Display - Not Successful Login
        /////////////////////////////////////////////////
        ob_start(); 
        ?>

... 
Sorry, that username is already taken.

        <?php
        $display = ob_get_contents();
        ob_end_clean();
        print($display);
        /////////////////////////////////////////////////
    } else {
        /////////////////////////////////////////////////
        // Display - Successful Login
        /////////////////////////////////////////////////
        ob_start(); 
        ?>

... 
Success!
Welcome to the XternCoin Network.

        <?php
        $display = ob_get_contents();
        ob_end_clean();
        print($display);
        /////////////////////////////////////////////////
    }
};
    
////////////////////////
// public/member/coins
////////////////////////
$GLOBALS['public']['member']['coins'] = function(){
    $coins = $GLOBALS['notpublic']['GenerateViewData']['display_coins']();
    /////////////////////////////////////////////////
    // Display 'Coins Data'
    /////////////////////////////////////////////////
    ob_start(); 
    ?>

You have <?php print $coins; ?> coin<?php print ($coins != 1) ? 's': ''; ?> 

    <?php
    $display = ob_get_contents();
    ob_end_clean();
    print($display);
    /////////////////////////////////////////////////
};


////////////////////////
// public/coins/start_guessing
////////////////////////
$GLOBALS['public']['coins']['start_guessing'] = function(){
    /////////////////////////////////////////////////
    // Because the guess is generated by the client, and then sent to the server, start_guessing generates the guess on the client side (/public/)
    /////////////////////////////////////////////////
    
    /////////////////////////////
    // Ask user how many guesses they would like to attempt
    /////////////////////////////
    ob_start(); 
    ?>
d
You are about to start guessing coins. 
The current probability of guessing a coin correctly is 10%
Please specify how many attempts you would like to make (Input any integer):
--> <?php
    $display = ob_get_contents();
    ob_end_clean();
    print($display);
    /////////////////////////////////////////////////
    $attempts = (int)returnUserInput();
    for($index = 0; $index < $attempts; $index++){
        $thisGuess = rand(0, 10);
        $placeholder = ($thisGuess < 10)? '0' : ''; // keep the display constant in length: display 01 instead of 1, to make it easier to read. (length(10) = 2)
        print ("Guessing " . $placeholder . $thisGuess . "... ");
        $result = $GLOBALS['notpublic']['ClientSideControl']['coins']['record_and_submit_guess']($thisGuess);
        if($result == true){
            print (" success. XternCoin +1"); 
        } else {
            print (" failed.");   
        }
        print("\n");
    }

};

/////////////////////////////////////////////////////////////////////////////////////////////////
// notpublic
/////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////
// Initialize Notpublic function array
///////////////////////////////////////
$GLOBALS['notpublic'] = []; // Used to interface client side with server side and mimic directory structure. 
///////////////////////////////////////
////////////////////////
// Initialize ClientSideControl parent directory and subdirectories of the nonpublic directory
////////////////////////
$GLOBALS['notpublic']['ClientSideControl'] = [];
$GLOBALS['notpublic']['ClientSideControl']['member'] = [];
$GLOBALS['notpublic']['ClientSideControl']['coins'] = [];
////////////////////////
///////////////////////////////////////
// ClientSideControl/member/login
///////////////////////////////////////
$GLOBALS['notpublic']['ClientSideControl']['member']['login'] = function($username, $password){
    return $GLOBALS['UserManager']->attemptUserLogin($username, $password);
};
///////////////////////////////////////
// ClientSideControl/member/signin
///////////////////////////////////////
$GLOBALS['notpublic']['ClientSideControl']['member']['signup'] = function($username, $password){
    return $GLOBALS['UserManager']->attemptUserRegistration($username, $password);
};

///////////////////////////////////////
// ClientSideControl/coins/record_and_submit_guess
///////////////////////////////////////
$GLOBALS['notpublic']['ClientSideControl']['coins']['record_and_submit_guess'] = function($user_guess){
    $result = $GLOBALS['ServerCoinManager']->handleGuess($user_guess);
    ////////////////
    // Log event
    ////////////////
    
    ////////////////
    // If result is successful, incrememnt user coin count
    ///////////////
    if($result == true){
        $GLOBALS['UserManager']->incrementCoinCount();   
    }
    return $result;
};

////////////////////////
// Initialize GenerateViewData parent directory and subdirectories of the nonpublic directory
////////////////////////
$GLOBALS['notpublic']['GenerateViewData'] = [];
////////////////////////
///////////////////////////////////////
// GenerateViewData/display_coins
///////////////////////////////////////
$GLOBALS['notpublic']['GenerateViewData']['display_coins'] = function(){
    $coins = $GLOBALS['UserManager']->returnUserData()['coins'];
    return $coins;
};




///////////////////////////////////////
// Model/DataStructure_Interfaces/mysql_interface
///////////////////////////////////////
class MySQLManager {
    protected static $users = null;
    protected static $databaseName = null;
    
    function defineUsers($users){
        self::$users = $users;   
    }
    function defineDatabaseName($databaseName){
        self::$databaseName = $databaseName;   
    }
 
    function returnMysqliObjectFor($user){
        if(!isset(self::$users[$user])){
            print "Error, that user requested for mysqli object is not defined.";
            die();
        }
        /////////////////
        // Upon creating the mysqli object, replace the $users[$user] value with the object
        /////////////////
        if(is_string(self::$users[$user])){
            $mysqli = mysqli_connect("localhost", $user, self::$users[$user],self::$databaseName);
            if (mysqli_connect_errno()) {
                echo "Failed to connect to MySQL: " . mysqli_connect_error();
                die();
            }      
            self::$users[$user] = $mysqli;
        } 
        
        return self::$users[$user];
    }
};
$databaseName = "XCoin";
$users = [ // User => Password. Note - Normally we would avoid storing passwords in plaintext
        "XCoinUserManager" => "ManageXCoinUsers",
    ];
$mysqliManager = new MySQLManager();
$mysqliManager->defineUsers($users);
$mysqliManager->defineDatabaseName($databaseName);
$GLOBALS["MYSQLI_MANAGER"] = $mysqliManager;
/*
    $mysqli = $GLOBALS["MYSQLI_MANAGER"]->returnMysqliObjectFor("PSScheduleManager");
*/




///////////////////////////////////////
// Model/Data_Managment/user_manager
///////////////////////////////////////
///////////////////////
// Hashbrown is a support class which one way hashes a password, which can be used to validate against
///////////////////////
class HashbrownClass {
    protected static $PBKDF2_HASH_ALGORITHM = "sha256";
    protected static $PBKDF2_ITERATIONS = 1000;
    protected static $PBKDF2_SALT_BYTE_SIZE = 24;
    protected static $PBKDF2_HASH_BYTE_SIZE = 24;

    protected static $HASH_SECTIONS = 4;
    protected static $HASH_ALGORITHM_INDEX = 0;
    protected static $HASH_ITERATION_INDEX = 1;
    protected static $HASH_SALT_INDEX = 2;
    protected static $HASH_PBKDF2_INDEX = 3;
    
    /*
     * PBKDF2 key derivation function as defined by RSA's PKCS #5: https://www.ietf.org/rfc/rfc2898.txt
     * $algorithm - The hash algorithm to use. Recommended: SHA256
     * $password - The password.
     * $salt - A salt that is unique to the password.
     * $count - Iteration count. Higher is better, but slower. Recommended: At least 1000.
     * $key_length - The length of the derived key in bytes.
     * $raw_output - If true, the key is returned in raw binary format. Hex encoded otherwise.
     * Returns: A $key_length-byte key derived from the password and salt.
     *
     * Test vectors can be found here: https://www.ietf.org/rfc/rfc6070.txt
     *
     * This implementation of PBKDF2 was originally created by https://defuse.ca
     * With improvements by http://www.variations-of-shadow.com
     */
    
    function pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = false)
    {
        $algorithm = strtolower($algorithm);
        if(!in_array($algorithm, hash_algos(), true))
            trigger_error('PBKDF2 ERROR: Invalid hash algorithm.', E_USER_ERROR);
        if($count <= 0 || $key_length <= 0)
            trigger_error('PBKDF2 ERROR: Invalid parameters.', E_USER_ERROR);
        if (function_exists("hash_pbkdf2")) {
            // The output length is in NIBBLES (4-bits) if $raw_output is false!
            if (!$raw_output) {
                $key_length = $key_length * 2;
            }
            return hash_pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output);
        }
        $hash_length = strlen(hash($algorithm, "", true));
        $block_count = ceil($key_length / $hash_length);
        $output = "";
        for($i = 1; $i <= $block_count; $i++) {
            // $i encoded as 4 bytes, big endian.
            $last = $salt . pack("N", $i);
            // first iteration
            $last = $xorsum = hash_hmac($algorithm, $last, $password, true);
            // perform the other $count - 1 iterations
            for ($j = 1; $j < $count; $j++) {
                $xorsum ^= ($last = hash_hmac($algorithm, $last, $password, true));
            }
            $output .= $xorsum;
        }
        if($raw_output)
            return substr($output, 0, $key_length);
        else
            return bin2hex(substr($output, 0, $key_length));
    }
    
    // Compares two strings $a and $b in length-constant time.
    function slow_equals($a, $b)
    {   
        $diff = strlen($a) ^ strlen($b);
        for($i = 0; $i < strlen($a) && $i < strlen($b); $i++)
        {
            $diff |= ord($a[$i]) ^ ord($b[$i]);
        }
        return $diff === 0;
    }
    
    
      function create_hash($password)
        {
            // format: algorithm:iterations:salt:hash
            $salt = base64_encode(mcrypt_create_iv(self::$PBKDF2_SALT_BYTE_SIZE, MCRYPT_DEV_URANDOM));
            return self::$PBKDF2_HASH_ALGORITHM . ":" . self::$PBKDF2_ITERATIONS . ":" .  $salt . ":" .
               $hash = base64_encode(self::pbkdf2(
                    self::$PBKDF2_HASH_ALGORITHM,
                    $password,
                    $salt,
                    self::$PBKDF2_ITERATIONS,
                    self::$PBKDF2_HASH_BYTE_SIZE,
                    true
                ));
        }
    
    
        function validate_password($password, $correct_hash)
        {
            $params = explode(":", $correct_hash);
            if(count($params) < self::$HASH_SECTIONS){
               return false;
            } 
            $pbkdf2 = base64_decode($params[self::$HASH_PBKDF2_INDEX]);
            return self::slow_equals(
                $pbkdf2,
                self::pbkdf2(
                    $params[self::$HASH_ALGORITHM_INDEX],
                    $password,
                    $params[self::$HASH_SALT_INDEX],
                    (int)$params[self::$HASH_ITERATION_INDEX],
                    strlen($pbkdf2),
                    true
                )
            );
        }
}
class ClassUserManager {
    protected static $Hashbrown = null; // HashbrownClass Object -- Used To hash password one-way so that passwords are not stored on server
    protected static $mysqliAccess = null;
    protected $userData = false;
    
    /////////////////////////////////////
    // Setter Functions: Set Static Variables
    /////////////////////////////////////
    public function setMySqli($var){                       ## Set mysqliAccess object 
        if(!($var instanceof MySQLi)){
            print "Variable Passed to set mysqli is not a mysqli object. Error.";
            die();
        }
        self::$mysqliAccess = $var;
        return true;
    }
    public function setHashbrown($var){                    ## Set Hashbrown object
        self::$Hashbrown = $var;
    }
    
    /////////////////////////////////////
    // Getter Functions : Get Data
    /////////////////////////////////////
    public function returnUserData(){                      ## Get user data
        $data = $this->userData;
        return $data; 
    }
    public function isSignedIn(){                          ## Check if user is signed in
        if($this->userData !== false){
            return true;   
        } else {
            return false;   
        }
    }
    
    /////////////////////////////////////
    // Incrememnt Coin Count
    //////////////////////////////////////
    public function incrementCoinCount(){
        /////////////////
        // Incrememnt remote coin count
        /////////////////
        $userID = self::returnUserData()['id'];
        $mysqli = self::$mysqliAccess;
        $stmt = $mysqli->prepare("UPDATE `Users` SET `Coins`= `Coins`+1 WHERE `UserID` = ?"); 
        echo $mysqli->error;
        $stmt->bind_param("s", $userID);
        $exec = $stmt->execute();
        $stmt->close();
        ////////////////////////

        ////////////////////////
        // Update local coin count
        ////////////////////////
        $userData = self::generateUserDataForID($userID);
        $this->userData = $userData; 
        
        return $exec;
    }
    
    
    /////////////////////////////////////
    // Find User
    ////////////////////////////////////
    protected function lookupUserBy($key, $value){            ## Find a user by a key value pair from database
        $valid_keys = [
            "username" => [
                    "query" => "SELECT UserID FROM Users WHERE Username = ?",
                ],
            /*
            example of how else one might look up a user in the future
            "lookupKey" => [
                    "query" => "SELECT UserID FROM Users WHERE LookupKey = ?",     
                ],
            */
            ];
        
        $thisQuery = $valid_keys[$key]["query"];
        if(!isset($thisQuery)){
            print "That Lookup Key ($key) is not defined. Error.";
            die();
        }
        
        $mysqli = self::$mysqliAccess;
        $stmt = $mysqli->prepare($thisQuery);
        //print "SELECT Title, FilePath, DateTimeAdded, Views, Downloads FROM Schedules WHERE LocationID = '".$locationID."' AND Alive = '1'";
        print   $mysqli->error ;
        $stmt->bind_param("s", $value);
        $stmt->execute();
        $stmt->store_result();
        $numRows = $stmt->num_rows;
        //print $num_of_rows;
        $stmt->bind_result($userID);  
        while ($stmt->fetch()) {}
        $stmt->free_result();
        $stmt->close();

        if($numRows == 0){
            return false;   
        }
        return $userID;
    }
    
    
    /////////////////////////////////////
    // Return data for user by ID
    /////////////////////////////////////
    protected function returnHashDataForID($userID){
        $mysqli = self::$mysqliAccess;
        $stmt = $mysqli->prepare("SELECT Hash FROM Users WHERE UserID = ?");
        //print "SELECT Title, FilePath, DateTimeAdded, Views, Downloads FROM Schedules WHERE LocationID = '".$locationID."' AND Alive = '1'";
        print   $mysqli->error;
        $stmt->bind_param("s", $userID);
        $stmt->execute();
        $stmt->store_result();
        $numRows = $stmt->num_rows;
        //print $num_of_rows;
        $stmt->bind_result($hash);  
        while ($stmt->fetch()) {
            $hash = $hash;
        }
        $stmt->free_result();
        $stmt->close();

        if($numRows == 0){
            return false;   
        }
        return $hash;
    }
    protected function returnUserDataForID($userID){
        $mysqli = self::$mysqliAccess;
        $stmt = $mysqli->prepare("SELECT Coins FROM Users WHERE UserID = ?");
        //print "SELECT Title, FilePath, DateTimeAdded, Views, Downloads FROM Schedules WHERE LocationID = '".$locationID."' AND Alive = '1'";
        print   $mysqli->error ;
        $stmt->bind_param("s", $userID);
        $stmt->execute();
        $stmt->store_result();
        $numRows = $stmt->num_rows;
        //print $num_of_rows;
        $stmt->bind_result($coins);  
        while ($stmt->fetch()) {
            $userData = [
                    "id" => $userID,
                    "coins" => $coins,
                ];
        }
        $stmt->free_result();
        $stmt->close();

        if($numRows == 0){
            return false;   
        }
        return $userData;
    }
    
    /////////////////////////////////////
    // LOGOUT
    /////////////////////////////////////
    public function logUserOut(){                          ## Log User Out
        self::$userData = false;
    }
    
    /////////////////////////////////////
    // REGISTER
    /////////////////////////////////////
    public function attemptUserRegistration($username, $password){
        ## Verify that the username is unique
        $userID = self::lookupUserBy("username", $username);
        if($userID !== false) {
            return 'ALREADY_REGISTERED';
        }
        ## Register the user, since the username is unique
        $userID = self::registerUser($username, $password);
        ## Sign the user in, now that they are registered
        self::attemptUserLogin($username, $password);
    }
    protected function registerUser($username, $password){    ## Register a user with given username and password
        //print "Beginning Registration";
        $username = strtolower($username);
        $hash = self::$Hashbrown->create_hash($password);
        
        /////////////////////////
        // Insert User into Users
        ////////////////////////
        $mysqli = self::$mysqliAccess;
        $when = date('Y-m-d H:i:s');
        $coins = 0;
        $stmt = $mysqli->prepare("INSERT INTO Users (`Username`, `Hash`, `Coins`) VALUES (?, ?, ?)");
        //print "INSERT INTO Users (`DateTimeAdded`, `Email`) VALUES ('$when', '$email')";
        echo $mysqli->error;
        $stmt->bind_param("sss", $username, $hash, $coins);
        $exec = $stmt->execute();
        $stmt->close();
        ////////////////////////
        var_dump($exec);
        $userID = $mysqli->insert_id;
        //print "here i am!";
        var_dump($userID);
        
        /////////////////
        // Return User ID
        /////////////////
        return $userID;
    }
    
    
    /////////////////////////////////////
    // LOGIN
    /////////////////////////////////////
    public function attemptUserLogin($username, $password){
        /////////////////////////
        // Find the user with the given username
        /////////////////////////
        $userID = self::lookupUserBy("username", $username);
        $hash = self::returnHashDataForID($userID);
        //var_dump($hash);
        
        /////////////////////////
        // Security Measure: 
        // If the username is not registered, make a fake password 
        //   and still run the validation function in order to keep
        //   the time spent validating registered usernames and unregistered
        //   usernames equal. This eliminates the possibility of learning 
        //   which usernames are registered and which are not based on validation time.
        /////////////////////////
        if($hash == false){
            $hash = "sha256:1000:abcdefg:1234567";
        }

        /////////////////////////
        // Make sure the passwords match
        /////////////////////////
        $result = self::$Hashbrown->validate_password($password, $hash);
        if($result !== true){
            return false;   
        }
        
        /////////////////////////
        // Log the user in
        /////////////////////////
        $result = self::logUserIn($userID);
        return $result;
    }
    protected function generateUserDataForID($userID){
        $data = self::returnUserDataForID($userID);
        $coins = $data['coins'];
        $userData = [
                "id" => $userID,
                "coins" => $coins,
            ];
        return $userData;
    }
    protected function logUserIn($userID){
        $userData = self::generateUserDataForID($userID);
        $this->userData = $userData; 
        return true;
    }
};
$UserManager = new ClassUserManager();
$UserManager->setMySqli($GLOBALS["MYSQLI_MANAGER"]->returnMysqliObjectFor("XCoinUserManager"));
$hashbrown = new HashbrownClass();
$UserManager->setHashbrown($hashbrown);
$GLOBALS['UserManager'] = $UserManager;


///////////////////////////////////////
// Model/Data_Managment/server_coin_manager
///////////////////////////////////////
class ClassServerCoinManager {
    protected static $current_coin = null;
    
    
    //////////////////////////////////////
    // Constructor
    //////////////////////////////////////
    public function __construct(){
        self::$current_coin = rand(0, 10);
    }
    
    //////////////////////////////////////
    // Handle User Guess
    //////////////////////////////////////
    public function handleGuess($user_guess){
        $correct = $user_guess == self::$current_coin;   
        if(!$correct){
            return false;
        }
        ///////////////////
        // If correct, generate new coin
        ///////////////////
        self::$current_coin = rand(0,10);
        return true;
    }
}
$ServerCoinManager = new ClassServerCoinManager();
$GLOBALS['ServerCoinManager'] = $ServerCoinManager;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
// Script that is actual run at launch.
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
for($index = 0; $index < 10; $index++){
    print("\n");
}
/////////////////////////////
// Print Welcome Message
/////////////////////////////
ob_start(); 
?>
################################################################
###### WELCOME TO THE XTERNCOIN NETWORK COMMAND INTERFACE ######
################################################################
<?php
$display = ob_get_contents();
ob_end_clean();
print($display);
main();
print("\n");
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


die();
?>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MYSQL DATABASE INITIALIZATION CODE
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////
// MYSQL User
///////////////////////////////////////////////////
# Privileges for `XCoinUserManager`@`localhost`
##################################
## PLEASE ENSURE PASSWORD IS SET CORRECTLY
##################################
CREATE USER 'XCoinUserManager'@'localhost' IDENTIFIED WITH mysql_native_password AS 'ManageXCoinUsers';
GRANT USAGE ON *.* TO 'XCoinUserManager'@'localhost';
GRANT SELECT, INSERT (Hash, Coins, Username), UPDATE (Coins) ON `XCoin`.`Users` TO 'XCoinUserManager'@'localhost';


///////////////////////////////////////////////////
// Database Dump:
///////////////////////////////////////////////////
-- phpMyAdmin SQL Dump
-- version 4.5.4.1deb2ubuntu2
-- http://www.phpmyadmin.net
--
-- Host: localhost
-- Generation Time: Oct 27, 2016 at 12:22 AM
-- Server version: 5.7.13-0ubuntu0.16.04.2
-- PHP Version: 7.0.10-1+deb.sury.org~xenial+1

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;
--
-- Database: `XCoin`
--

-- --------------------------------------------------------

--
-- Table structure for table `Users`
--

CREATE TABLE `Users` (
  `UserID` int(11) NOT NULL,
  `Username` varchar(2555) NOT NULL,
  `Hash` varchar(25555) NOT NULL,
  `Coins` int(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Indexes for dumped tables
--

--
-- Indexes for table `Users`
--
ALTER TABLE `Users`
  ADD PRIMARY KEY (`UserID`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `Users`
--
ALTER TABLE `Users`
  MODIFY `UserID` int(11) NOT NULL AUTO_INCREMENT;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
